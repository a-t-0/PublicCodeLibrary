// Source: https://stackoverflow.com/questions/23587314/how-to-sort-an-array-and-keep-track-of-the-index-in-java
//0. Add the following method to your code and pass it an array that you want to sort with:
// 0.1 The original indices in arr[0][]
// 0.2 The values of the array in arr[1][]
//1. Then create separate class:

	/**
     * Actual sort keeping track of indices!
     * @param args
     */
    public static void customSort(Object[][] arr) {
        Pair[] yourArray = new Pair[arr[0].length];
        
        //fill the array
        for (int i = 0;i<arr[0].length;i++) {
        	System.out.println("To double:"+(double) arr[1][i]);
        	yourArray[i] = new Pair((int) arr[0][i],((double) arr[1][i]));
        }
        
        Arrays.sort(yourArray);
        for (int i = 0;i<yourArray.length;i++) {
        	System.out.println("i="+yourArray[i].index+" and urg = "+yourArray[i].value);
        }
    }


 //1. Separate class pair:
 //package test0;

public class Pair implements Comparable<Pair> {
    public final int index;
    public final double value;

    public Pair(int index, double value) {
        this.index = index;
        this.value = value;
    }

    @Override
    public int compareTo(Pair other) {
        //multiplied to -1 as the author need descending sort order
        //return -1 * Integer.valueOf(this.value).compareTo(other.value);
    	if (this.value<=other.value) {
    		return -1;
    	} else if(this.value==other.value) {return 0;} else {
    		return 1;
    	}    	
    }
}